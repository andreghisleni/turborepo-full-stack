# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthType {
  refreshToken: String!
  session: Session!
  token: String!
}

""""""
input CreateAuthInput {
  """The email of the user"""
  email: String!

  """The password of the user"""
  password: String!
}

""""""
input CreateOrganizationInput {
  """The domain of the organization"""
  domain: String

  """The name of the organization"""
  name: String!

  """The owner of the organization"""
  ownerId: String!

  """Whether to attach users by domain"""
  shouldAttachUsersByDomain: Boolean!

  """The slug of the organization"""
  slug: String!
}

""""""
input CreateUserInput {
  """The email of the user"""
  email: String!

  """The name of the user"""
  name: String!

  """The password of the user"""
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  activateUser(id: String!): User!
  blockUser(id: String!): User!
  createOrganization(
    """Create a new organization"""
    input: CreateOrganizationInput!
  ): Organization!
  createSession(data: CreateAuthInput!): AuthType!
  createUser(
    """Create a new user"""
    input: CreateUserInput!
  ): User!
  refreshSession(refreshToken: String!): AuthType!
  resetPassword(
    """Reset user password"""
    input: ResetPasswordInput!
  ): Boolean!
  sendForgotPasswordEmail(email: String!): Boolean!
  updateAvatar(avatar: String!): User!
  updateProfile(
    """Create a new organization"""
    input: UpdateOrganizationInput!
  ): Organization!
  updateRole(
    """Update user role"""
    input: UpdateRoleInput!
  ): User!
}

type Organization {
  avatarUrl: String
  createdAt: DateTime!
  domain: String
  id: String!
  invites: String!
  members: String!
  name: String!
  owner: User!
  shouldAttachUsersByDomain: Boolean!
  slug: String!
  updatedAt: DateTime!
}

type Query {
  getTotalOrganizations: Float!
  getTotalUsers: Float!
  organization(id: String!): Organization!
  organizationBySlug(slug: String!): Organization!
  organizations: [Organization!]!
  profile: User!
  session: Session!
  user(id: String!): User!
  users: [User!]!
}

""""""
input ResetPasswordInput {
  password: String!
  tokenId: String!
}

type Session {
  createdAt: DateTime!
  id: String!
  member: String!
  updatedAt: DateTime!
  user: User!
}

""""""
input UpdateOrganizationInput {
  """The id of the organization"""
  id: String!

  """The name of the organization"""
  name: String
}

""""""
input UpdateRoleInput {
  role: UpdateRoleInput_RoleEnum_0!
  userId: String!
}

"""Enum values for UpdateRoleInput.role"""
enum UpdateRoleInput_RoleEnum_0 {
  ADMIN
  DEFAULT
}

type User {
  activatedAt: DateTime
  avatarUrl: String
  blockedAt: DateTime
  createdAt: DateTime!
  email: String!
  id: String!
  invites: String!
  ips: String!
  member_on: String!
  name: String!
  owns_organizations: [Organization!]!
  passwordUpdatedAt: DateTime!
  role: String!
  sessions: [Session!]!
  tokens: String!
  updatedAt: DateTime!
}
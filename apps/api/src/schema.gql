# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthType {
  refreshToken: String!
  session: Session!
  token: String!
}

""""""
input CreateAuthInput {
  """The email of the user"""
  email: String!

  """The password of the user"""
  password: String!
}

""""""
input CreateInviteInput {
  """The email of the invite"""
  email: String!

  """The role of the invite"""
  role: CreateInviteInput_RoleEnum_0!
}

"""The role of the invite"""
enum CreateInviteInput_RoleEnum_0 {
  ADMIN
  BILLING
  MEMBER
}

""""""
input CreateOrganizationInput {
  """The domain of the organization"""
  domain: String

  """The name of the organization"""
  name: String!

  """The owner of the organization"""
  ownerId: String!

  """Whether to attach users by domain"""
  shouldAttachUsersByDomain: Boolean!

  """The slug of the organization"""
  slug: String!
}

""""""
input CreateUserInput {
  """The email of the user"""
  email: String!

  """The invite id of the user"""
  inviteId: String

  """The name of the user"""
  name: String!

  """The password of the user"""
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

""""""
input FilterInput {
  """Filter"""
  filter: String! = ""

  """Limit"""
  limit: Float = 20

  """Page"""
  page: Float = 0
}

""""""
input FilterMemberInput {
  """Limit"""
  limit: Float = 20

  """Filter"""
  name: String! = ""

  """Page"""
  page: Float = 0
}

""""""
input FilterOrganizationInput {
  """Limit"""
  limit: Float = 20

  """Filter"""
  name: String! = ""

  """Page"""
  page: Float = 0
}

""""""
input FilterUserInput {
  """Limit"""
  limit: Float = 20

  """Filter"""
  name: String! = ""

  """Page"""
  page: Float = 0
}

type Invite {
  acceptedAt: DateTime
  author: User
  createdAt: DateTime!
  email: String!
  id: String!
  organization: Organization!
  rejectedAt: DateTime
  role: String!
}

type Member {
  createdAt: DateTime!
  id: String!
  organization: Organization!
  role: String!
  sessions: [Session!]!
  user: User!
}

type Mutation {
  acceptInvite(id: String!): Invite!
  activateUser(id: String!): User!
  blockUser(id: String!): User!
  createInvite(
    """Create a new invite"""
    input: CreateInviteInput!
  ): Invite!
  createOrganization(
    """Create a new organization"""
    input: CreateOrganizationInput!
  ): Organization!
  createSession(data: CreateAuthInput!): AuthType!
  createUser(
    """Create a new user"""
    input: CreateUserInput!
  ): User!
  refreshSession(refreshToken: String!): AuthType!
  rejectInvite(id: String!): Invite!
  resetPassword(
    """Reset user password"""
    input: ResetPasswordInput!
  ): Boolean!
  sendForgotPasswordEmail(email: String!): Boolean!
  updateAvatar(avatar: String!): User!
  updateMemberRole(
    """Update user role"""
    input: UpdateMemberRoleInput!
  ): Member!
  updateProfile(
    """Create a new organization"""
    input: UpdateOrganizationInput!
  ): Organization!
  updateRole(
    """Update user role"""
    input: UpdateRoleInput!
  ): User!
  updateSession(slug: String!): Session!
}

type Organization {
  avatarUrl: String
  createdAt: DateTime!
  domain: String
  id: String!
  invites: [Invite!]!
  members: [Member!]!
  name: String!
  owner: User!
  shouldAttachUsersByDomain: Boolean!
  slug: String!
  updatedAt: DateTime!
}

type Query {
  getTotalInvites(filter: FilterInput = {}): Float!
  getTotalMembers(
    """Filtered a new client"""
    filter: FilterMemberInput = {}
  ): Float!
  getTotalOrganizations(
    """Filtered a new client"""
    filter: FilterOrganizationInput = {}
  ): Float!
  getTotalUsers(
    """Filtered a new client"""
    filter: FilterUserInput = {}
  ): Float!
  invite(id: String!): Invite!
  invites(filter: FilterInput = {}): [Invite!]!
  member(id: String!): Member!
  members(
    """Filtered a new client"""
    filter: FilterMemberInput = {}
  ): [Member!]!
  organization(id: String!): Organization!
  organizationBySlug(slug: String!): Organization!
  organizations(
    """Filtered a new client"""
    filter: FilterOrganizationInput = {}
  ): [Organization!]!
  profile: User!
  session: Session!
  user(id: String!): User!
  users(
    """Filtered a new client"""
    filter: FilterUserInput = {}
  ): [User!]!
}

""""""
input ResetPasswordInput {
  password: String!
  tokenId: String!
}

type Session {
  createdAt: DateTime!
  id: String!
  member: Member!
  organization: Organization!
  updatedAt: DateTime!
  user: User!
}

""""""
input UpdateMemberRoleInput {
  memberId: String!
  role: UpdateMemberRoleInput_RoleEnum_0!
}

"""Enum values for UpdateMemberRoleInput.role"""
enum UpdateMemberRoleInput_RoleEnum_0 {
  ADMIN
  BILLING
  MEMBER
}

""""""
input UpdateOrganizationInput {
  """The id of the organization"""
  id: String!

  """The name of the organization"""
  name: String
}

""""""
input UpdateRoleInput {
  role: UpdateRoleInput_RoleEnum_0!
  userId: String!
}

"""Enum values for UpdateRoleInput.role"""
enum UpdateRoleInput_RoleEnum_0 {
  ADMIN
  DEFAULT
}

type User {
  activatedAt: DateTime
  avatarUrl: String
  blockedAt: DateTime
  createdAt: DateTime!
  email: String!
  id: String!
  invites: [Invite!]!
  ips: String!
  member_on: [Member!]!
  name: String!
  owns_organizations: [Organization!]!
  passwordUpdatedAt: DateTime!
  role: String!
  sessions: [Session!]!
  updatedAt: DateTime!
}
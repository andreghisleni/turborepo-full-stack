// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name      String
  email     String  @unique
  avatarUrl String? @map("avatar_url")

  passwordHash String @map("password_hash")

  role UserRoles @default(DEFAULT)

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  passwordUpdatedAt DateTime @default(now()) @map("password_updated_at")

  activatedAt DateTime? @map("activated_at")
  blockedAt   DateTime? @map("blocked_at")

  tokens Token[]
  ips    Ip[]

  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  sessions           Session[]

  @@map("users")
}

enum UserRoles {
  ADMIN
  DEFAULT
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model Ip {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  ip    String
  local String

  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_ips")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  acceptedAt DateTime? @map("accepted_at")
  rejectedAt DateTime? @map("rejected_at")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  sessions Session[]

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  @unique
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites Invite[]
  members Member[]

  @@map("organizations")
}

model Session {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  memberId String? @map("member_id")
  member   Member? @relation(fields: [memberId], references: [id])

  // lastUpdatedToken DateTime? @map("last_updated_token")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}
